/*Q2. Copy the Point2D class , along with the package from previous assignment.
a) Create a class "TestPointArray1.java" in "tester" package for the following
b) Accept , how many no of points to plot from user.
c) Create suitable data structure
Hint : Point2D[] points=new Point2D[sc.nextInt()];
d) Prompt user for x & y co ordinates n store the data suitably
Hint : for loop
e) Supply Menu to user with various Options like following
1. Display details of a specific point
User i/p : index
O/p : x & y co-ordinates should be displayed. or error message(eg : Invalid index , pls retry!!!!)
2) Display x, y co-ordinates of all points
Hint : for-each
3) User i/p : 2 indices for the points , validate the indices
Display distance between specified points (iff they are not located at the same position)
eg : sop("Enter index of strt point n end point");
validation : boundary condition (0<=index<length-1)
isEqual -- false --compute distance --display it.
4. Exit*/

package com.app.geometry;

import java.util.Scanner;

public class Point2D 
{
	private int x_point;
	private int y_point;
	
	public Point2D() 
	{
		this.x_point = 0;
		this.y_point = 0;
	}

	public Point2D(int x_point, int y_point) {
		
		this.x_point = x_point;
		this.y_point = y_point;
	}

	public int getX_point() {
		return x_point;
	}

	public void setX_point(int x_point) {
		this.x_point = x_point;
	}

	public int getY_point() {
		return y_point;
	}

	public void setY_point(int y_point) {
		this.y_point = y_point;
	}
	
	public void acceptData()
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter x co-ordinate");
		this.x_point = sc.nextInt();
		System.out.println("Enter y co-ordinate");
		this.y_point = sc.nextInt();
	}
	
	public void displayData()
	{
		System.out.println("["+this.x_point+","+this.y_point+"]");
	}
	
	public String getDetails_x()
	{
		String x_string = Integer.toString(this.x_point);
		return x_string;
		
	}
	
	public String getDetails_y()
	{		
		String y_string = Integer.toString(this.y_point);
		return y_string;
	}
	
	public boolean isEqual(Point2D p2)
	{
		if(this.x_point == p2.x_point && this.y_point == p2.y_point)
			return true;
			else 
				return false;
	}
	
	public double calculateDistance(Point2D p2)
	{
		double distance = Math.sqrt((Math.pow(p2.x_point-this.x_point, 2)) + (Math.pow(p2.y_point-this.y_point, 2)));
		return distance;
	}
	
}
